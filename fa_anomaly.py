# -*- coding: utf-8 -*-
"""FA Anomaly.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EtxEGwiB3RKL5NM45P0kkqSTJMoU5Gmy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score, recall_score
from sklearn.ensemble import IsolationForest
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.ensemble import IsolationForest
from sklearn.metrics import silhouette_score
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

df=pd.read_csv('/content/anomaly_train.csv')

df.head(4)

df.shape

df.info()

df.describe(include='all')

df.isnull().sum()

#no null values observed

df.duplicated().sum()

numerical_columns=df.select_dtypes(include=['int64','float64']).columns

correlation_matrix=df[numerical_columns].corr()
print(correlation_matrix)

plt.figure(figsize=(10,6))
sns.heatmap(correlation_matrix,annot=True,fmt='.2f')

#finding outliers
for column in numerical_columns:
  plt.figure(figsize=(10,8))
  sns.boxplot(df[column])
  plt.show()

#removing outliers
new_df=df[numerical_columns]
q1=new_df.quantile(0.25)
q3=new_df.quantile(0.75)
iqr=q3-q1

outliers=(df[(new_df>q3+1.5*iqr)|(new_df<q1-1.5*iqr)]).any(axis=1)
print(outliers)
new_df=new_df[~outliers]

df.columns

le=LabelEncoder()
df['Type']=le.fit_transform(df['Type'])
df['Location']=le.fit_transform(df['Location'])

model_outlier = IsolationForest(contamination=0.1, random_state=42)
outliers = model_outlier.fit_predict(df[['TransactionID', 'Amount', 'Type', 'Time', 'Location', 'User']])
df['is_an_outlier'] = outliers

features = ['TransactionID', 'Amount', 'Type', 'Time', 'Location', 'User']
x = df[features]
y = df['is_an_outlier']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

model = IsolationForest(n_estimators=100, contamination=0.1, max_features=3, max_samples=10000, random_state=42)
model.fit(x_train)

# Predict the anomalies in the data
y_pred = model.predict(x_train)
df["anomaly_score"] = model.decision_function(x)

anomalies = df.loc[df["anomaly_score"] < 0]

plt.scatter(df['Amount'], df["anomaly_score"], label="Not an Anomaly")
plt.scatter(anomalies["Amount"], anomalies["anomaly_score"], color="b", label="Anomaly")
plt.xlabel("Amount")
plt.ylabel("Anomaly Score")
plt.title("Scatter plot for Amount and Anomaly Score")
plt.show()