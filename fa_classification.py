# -*- coding: utf-8 -*-
"""FA_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LBdEQDe1sUmJvZxpErI1YpRfJ7fBZ8lw
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score, recall_score
from sklearn.ensemble import IsolationForest
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.ensemble import IsolationForest
from sklearn.metrics import silhouette_score
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

df=pd.read_csv('/content/penguins_classification.csv')

df.head(5)

df.info()

df.shape

df.describe(include='all')

df.isnull().sum()

#no null values observed in data
df.duplicated().sum()

numerical_columns=df.select_dtypes(include=['int64','float64']).columns

correlation_matrix=df[numerical_columns].corr()
print(correlation_matrix)

plt.figure(figsize=(10,6))
sns.heatmap(correlation_matrix,annot=True,fmt='.2f')

#finding outliers
for column in numerical_columns:
  plt.figure(figsize=(10,8))
  sns.boxplot(df[column])
  plt.show()

#no outliers identified
#process to removing outliers
new_df=df[numerical_columns]
q1=new_df.quantile(0.25)
q3=new_df.quantile(0.75)
iqr=q3-q1

outliers=(df[(new_df>q3+1.5*iqr)|(new_df<q1-1.5*iqr)]).any(axis=1)
print(outliers)
new_df=new_df[~outliers]

le=LabelEncoder()
df['island']=le.fit_transform(df['island'])

df.head(2)

df['species'].value_counts()

df['species']=df['species'].map({'Adelie':1,'Gentoo':2})

x=df.drop('species',axis=1)
y=df['species']

model_bill_depth=x['bill_depth_mm'].mode()[0]
x['bill_depth_mm']=x['bill_depth_mm'].fillna(model_bill_depth)

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

scaler = MinMaxScaler()
x_train=pd.DataFrame(scaler.fit_transform(x_train[list(x.columns)]),
                                    columns=x.columns)
x_test=pd.DataFrame(scaler.transform(x_test[list(x.columns)]),
                                    columns=x.columns)

model=DecisionTreeClassifier()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)

y_pred[:5]

print(confusion_matrix(y_pred,y_test))
print(classification_report(y_pred,y_test))
print(accuracy_score(y_pred,y_test))