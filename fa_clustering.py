# -*- coding: utf-8 -*-
"""FA_clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10t0z2BPNqoV-pnMvGkUzHiHp_IdYp55k
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.cluster import KMeans
from xgboost import XGBClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import precision_score, recall_score
from sklearn.ensemble import IsolationForest
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.ensemble import IsolationForest
from sklearn.metrics import silhouette_score
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

df=pd.read_csv('/content/customer_segmentation.csv')

df.head(5)

df.info()

df.shape

df.describe(include='all')

df.isnull().sum()

model_income=df['Income'].mean()
df['Income']=df['Income'].fillna(model_income)

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

numerical_columns=df.select_dtypes(include=['int64','float64']).columns

correlation_matrix=df[numerical_columns].corr()
print(correlation_matrix)

plt.figure(figsize=(10,6))
sns.heatmap(correlation_matrix,annot=True,fmt='.2f')

#finding outliers
for column in numerical_columns:
  plt.figure(figsize=(10,8))
  sns.boxplot(df[column])
  plt.show()

#removing outliers
new_df=df[numerical_columns]
q1=new_df.quantile(0.25)
q3=new_df.quantile(0.75)
iqr=q3-q1

outliers=(df[(new_df>q3+1.5*iqr)|(new_df<q1-1.5*iqr)]).any(axis=1)
print(outliers)
new_df=new_df[~outliers]

df.columns

le=LabelEncoder()
df['Dt_Customer']=le.fit_transform(df['Dt_Customer'])
df['Marital_Status']=le.fit_transform(df['Marital_Status'])
df['Education']=le.fit_transform(df['Education'])

scaler=StandardScaler()
scaled_features=scaler.fit_transform(df)

inertia=[]
for i in range(1,8):
    kmeans=KMeans(n_clusters=i,random_state=20)
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(15,8))
plt.plot(range(1,8),inertia,marker='o')
plt.show()

from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=2, random_state=0)
y_pred = kmeans.fit_predict(scaled_features)
labels=kmeans.labels_
centers=kmeans.cluster_centers_

plt.figure(figsize=(10,6))
sns.scatterplot(x=df[:,0],y=df[:,1],data=df,legend=True)#palette=['green','red','blue','black','yellow'])
plt.show()

