# -*- coding: utf-8 -*-
"""InternalAssessment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cbCXbgectuIwMYnl98Tce4Vz07Zygc1H
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error,r2_score
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

df=pd.read_csv('/content/booking.csv')

df.head(5)

df.shape

df.info()

df.describe(include='all')

df.isnull().sum()

df.fillna(0)

df.duplicated().sum()

df=df.drop_duplicates()

df.duplicated().sum()

numerical_columns=df.select_dtypes(include=['int64','float64']).columns
print(numerical_columns)
categorical_columns=df.select_dtypes(include=['object']).columns
print(categorical_columns)

for column in numerical_columns:
  plt.figure(figsize=(10,4))
  sns.histplot(df[column])
  plt.title(f'Histogram of {column}')
  plt.show()

for column in categorical_columns:
  plt.figure(figsize=(10,4))
  df[column].value_counts().plot(kind='bar')
  plt.title(f'Bar chart of {column}')
  plt.show()

correlation_matrix=df[numerical_columns].corr()
print('Correlation matrix for numerical columns is:',correlation_matrix)

plt.figure(figsize=(10,4))
sns.heatmap(correlation_matrix,annot=True,fmt='.2f')
plt.title('heatmap of correlation matrix')
plt.show()

#scatter plots between different numerical values
for a in range(len(numerical_columns)):
  for b in range(a+1,len(numerical_columns)):
    plt.figure(figsize=(10,4))
    sns.scatterplot(df,y=df[a],x=df[b])
    plt.title(f'scatter plot between {df[a]} and {df[b]}')
    plt.show()

for column in numerical_columns:
  plt.figure(figsize=(10,4))
  sns.boxplot(x=df[column])
  plt.title(f'boxplot of {column}')
  plt.show()

new_df=df[numerical_columns]
q1=new_df.quantile(0.25)
q3=new_df.quantile(0.75)
iqr=q3-q1
outliers=((new_df>q3+1.5*iqr)|(new_df<q1-1.5*iqr)).any(axis=1)
print(outliers)
new_df=new_df[~outliers]
print(new_df)

encoded_df=pd.get_dummies(df,columns=['Booking_ID', 'type of meal', 'room type', 'market segment type',
       'date of reservation', 'booking status'],dtype='int')
print(encoded_df)

x=encoded_df.drop(columns=['booking status'])
y=encoded_df['booking status']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=40)

scaler = MinMaxScaler()
x_train=pd.DataFrame(scaler.fit_transform(x_train[list(x.columns)]),
                                    columns=x.columns)
X_test=pd.DataFrame(scaler.transform(x_test[list(x.columns)]),
                                    columns=x.columns)

model=LogisticRegression()
model=model.fit(x_train,y_train)
y_pred=model.predict(y_test)

print(classification_report(y_test,y_pred))
print(confusion_matrix(y_test,y_pred))
print(accuracy_score(y_test,y_pred,squared=False))